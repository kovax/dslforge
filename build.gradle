apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'project-report'

System.setProperty("file.encoding", "UTF-8")

defaultTasks 'clean', 'build'

version = '1.0'
group = 'org.beedom'
mainClass = 'org.beedom.dslforge.DSLEngine'
groovyVersion = '1.8.6'
//groovyVersion = '2.0.4'

manifest.mainAttributes("Implementation-Title": "DSLForge", "Implementation-Version": version, "Main-Class": mainClass)

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: groovyVersion

    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.0'
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    compile 'org.hamcrest:hamcrest-library:1.2.1'
    compile 'org.hamcrest:hamcrest-integration:1.2.1'
    compile 'commons-io:commons-io:2.2'
    compile 'org.xerial:sqlite-jdbc:3.7.2'

    testCompile 'junit:junit-dep:4.+'
}

test {
	testLogging {
		showStandardStreams true
		exceptionFormat "full"
	}
}

tasks.withType(Upload) { // map the groovy configuration to compile in the pom
    repositories.withType(MavenResolver) {
        pom.scopeMappings.addMapping(1, configurations.groovy, "compile")
    }
}

task execdsl (dependsOn: 'testClasses', type: JavaExec) {
    description = "Simple test task to run one DSL script"

    main = 'org.beedom.dslforge.DSLEngine'
    classpath = sourceSets.test.runtimeClasspath
    args 'AllFuntionalityScript.groovy'
}

/*
task dsl (dependsOn: 'testlasses', type: DefaultTask) {
    ant.taskdef(name: 'dsle', classname: 'org.beedom.dslforge.DSLEngineAntTask', classpath: sourceSets.test.runtimeClasspath.asPath)
    ant.dsle()
    println sourceSets.main.runtimeClasspath.asPath
}
*/
